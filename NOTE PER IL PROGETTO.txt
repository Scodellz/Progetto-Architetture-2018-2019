

 Questa descrizione ad alto livello si focalizza nel presentare le strutture fondamentali utilizzate dal Cifratore.
 Il programma è stato sviluppato in modo da rispettare il principio di modulatirà.
 Perciò è stata favorita la riusabilità delle procedure data la generalità con cui sono state scritte 
 per avere un codice più "facilmente" mantenibile, grazie anche alla suddivisione delle funzionalità in tante piccole procedure.


  CIFRATORE:
  bufferReader : .space[1500]
  bufferkey :    .space[4]
  chiave.txt
  messaggio.txt
  messaggioCifrato.txt
  messaggioDecifrato.txt

  open(messaggio.txt chiave.txt)
  read(messaggio.txt bufferReader chiave.txt bufferKey):
  cifratura(bufferReader bufferkey):
  print(bufferReader messaggioCifrato.txt)
  decifratura(bufferReader bufferkey):
  print(bufferReader messaggioDecifrato.txt)

 Il Cifratore avrà inizialmente il compito di inizializzare la tabella dei salti dedicata agli Algoritmi di Cifratura, successivamente dovrà 
 leggere i file di testo (contenenti la chiave di cifratura e messaggio da cifrare)e di caricarli negli appositi buffer.
 Nella fase di Decifratura leggerà il file da decifrare e lo caricherà in bufferReader, si utilizzerà un flag per leggere la chiave di cifratura    in     senso inverso.
 Alla fine di ogni fase il Cifratore ha il compito di scrivere nei file di uscita, chiamando le procedure apposite.

CIFRATURA E DECIFRATURA:

  CIFRATURA      		DECIFRATURA

  setStatusABC()                setStatusABC()
  core()                         core()

Visto gli algoritmi ABC hanno degli stati a comune, il loro settaggio è stato racchiuso in una procedura che aggiornerà
i registri interesati.
La fase di cifratura ha la responsabilita di caricare l'indirizzo della chiave, essendo la prima fase in cui viene utilizzata.
Questo riferimento sarà utilizzato da core per leggere la chiave in senso inverso durante la fase di decifratura.


CORE


L'array di riferimento per entrambe le operazioni è sempre bufferReader. All'inizio del programma contiene il messaggio originario,
mentre durante lo svolgimento dei vari algoritmi di cifratura conterrà le cifrature parziali ottenute dalle chiamate dei vari 
algoritmi e alla fine conterrà il messaggio finale da scrivere nel file di output.

**Aumentare piu descrizione se necessario **


Core è la procedura generica alla base del funzionamento dell'intero Cifratore, viene infatti utilizzata sia in fase di cifratura che in fase di decifratura. 
Core carica gli indirizzi di bufferReader e statusABC al suo interno un algoritmo di cifratura per ogni simbolo trovato all'interno di bufferkey.
La procedura di cifratura o decifratura finisce solo quando è stato letto ogni singolo carattere della chiave di cifratura.
