riferito a masterVersion2 ABC

 Questa descrizione ad alto livello si focalizza nel presentare le strutture fondamentali utilizzate dal Cifratore.
 Il programma è stato sviluppato in modo da rispettare il principio di modulatirà.
 Perciò è stata favorita la riusabilità delle procedure data la
 generalità con cui sono state scritte per avere un codice più "facilmente" mantenibile,
 e grazie anche alla suddivisione delle funzionalità in tante piccole procedure.


  CIFRATORE:
  bufferReader : .space[255]
  bufferkey: .space[5]
  messaggio.txt
  chiave.txt
  messaggioCifrato.txt
  messaggioDecifrato.txt

  open(messaggio.txt chiave.txt)
  read(messaggio.txt bufferReader chiave.txt bufferKey):
  cifratura(bufferReader bufferkey):
  print(bufferReader messaggioCifrato.txt)
  decifratura(bufferReader bufferkey):
  print(bufferReader messaggioDecifrato.txt)

Il Cifratore avrà inizialmente il compito di leggere i file di testo (contenenti il messaggio da cifrare e la chiave di cifratura) 
e di caricarli negli appositi buffer, nella seconda fase utilizzerà l'algoritmo D per invertire la chiave di cifratura corrente 
e caricarla nel medesimo buffer dedicato alla chiave.
A quel punto leggerà il file da decifrare e lo caricherà in bufferReader, per poi chiamare la procedura di decifratura.

Alla fine di ogni fase il Cifratore ha il compito di scrivere nei file di uscita dedicati, chiamando le procedure apposite

CIFRATURA E DECIFRATURA:

CIFRATURA    DECIFRATURA

algAstatus() algAstatus()
algBstatus() algBstatus()
algCstatus() algCstatus()
algDstatus() algDstatus()
algEstatus() algEstatus()
CORE()       CORE()

Il loro compito è quello di chiamare opportune procedure che hanno il compito di impostare dei flag.
Questi flag avranno effetto sul comportamento di Core,  la procedura che eseguirà l'effettiva operazione di
cifratura o decifratura chiamando gli opportuni algoritmi a seconda della lettera trovata in bufferKey.

L'array di riferimento per entrambe le operazioni è sempre bufferReader. All'inizio del programma contiene il messaggio originario,
mentre durante lo svolgimento dei vari algoritmi di cifratura conterrà le cifrature parziali ottenute dalle chiamate dei vari 
algoritmi e alla fine conterrà il messaggio finale da scrivere nel file di output.

**Aumentare piu descrizione se necessario **

CORE
VAR1:
VAR2:
CALL-A()
CALL-B()
CALL-C()
CALL-D()
CALL-E()

Core è la procedura generica alla base del funzionamento dell'intero Cifratore,
viene infatti utilizzata sia in fase di cifratura che in fase di decifratura.

Core riceve bufferkey e chiama su bufferReader un algoritmo di cifratura per ogni simbolo trovato all'interno di bufferkey.
La procedura di cifratura o decifratura finisce solo quando è stato letto ogni singolo carattere della chiave di cifratura.